exports('executeSync', function(query, parameters)
    local p = promise.new()
    exports.LSDream:execute(query, parameters, function(result)
        p:resolve(result)
    end, GetInvokingResource())
    return Citizen.Await(p)
end)

exports('fetchSync', function(query, parameters)
    local p = promise.new()
    exports.LSDream:fetch(query, parameters, function(result)
        p:resolve(result)
    end, GetInvokingResource())
    return Citizen.Await(p)
end)

exports('singleSync', function(query, parameters)
    local p = promise.new()
    exports.LSDream:single(query, parameters, function(result)
        p:resolve(result)
    end, GetInvokingResource())
    return Citizen.Await(p)
end)

exports('scalarSync', function(query, parameters)
    local p = promise.new()
    exports.LSDream:scalar(query, parameters, function(result)
        p:resolve(result)
    end, GetInvokingResource())
    return Citizen.Await(p)
end)

exports('insertSync', function(query, parameters)
    local p = promise.new()
    exports.LSDream:insert(query, parameters, function(result)
        p:resolve(result)
    end, GetInvokingResource())
    return Citizen.Await(p)
end)

exports('updateSync', function(query, parameters)
    local p = promise.new()
    exports.LSDream:update(query, parameters, function(result)
        p:resolve(result)
    end, GetInvokingResource())
    return Citizen.Await(p)
end)

exports('transactionSync', function(queries, parameters)
    local p = promise.new()
    exports.LSDream:transaction(queries, parameters, function(result)
        p:resolve(result)
    end, GetInvokingResource())
    return Citizen.Await(p)
end)

exports('prepareSync', function(query, parameters)
    local p = promise.new()
    exports.LSDream:prepare(query, parameters, function(result)
        p:resolve(result)
    end, GetInvokingResource())
    return Citizen.Await(p)
end)